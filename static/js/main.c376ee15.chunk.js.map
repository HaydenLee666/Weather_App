{"version":3,"sources":["backgroundImages/clear.jpg","backgroundImages/clouds.jpg","backgroundImages/drizzle.jpg","backgroundImages/rain.jpg","backgroundImages/snow.jpeg","backgroundImages/thunderstorm.jpeg","backgroundImages/atmosphere.jpg","component/Weather.js","component/WeatherApp.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Weather","props","pageBackground","document","getElementById","icon","style","background","thunderstormImgUrl","drizzleImgUrl","rainImgUrl","snowImgUrl","atmosphereImgUrl","clearImgUrl","cloudsImgUrl","className","description","city","country","temp","tempMax","tempMin","humidity","visibility","windSpeed","onSubmit","loadWeather","type","name","autoComplete","required","htmlFor","id","onClick","btn","innerHTML","setTimeout","dateF","iconF","tempF","descriptionF","API_key","process","WeatherApp","e","a","preventDefault","newcity","target","elements","value","fetchWeather","api","apiF","fetch","json","response","cod","alert","setState","isLoading","sys","calculateCelsius","main","temp_max","temp_min","optimizedDescription","weather","get_WeatherIcon","weatherIcons","Math","round","wind","speed","responseF","tempFArray","iconFArray","dateFArray","descriptionFArray","obj","list","i","push","get_Date","dt_txt","slice","state","undefined","celsius","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","rangeId","weatherIcon","str","monthStr","dayStr","substr","this","floor","toUpperCase","length","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c376ee15.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/clear.38fc0d75.jpg\";","module.exports = __webpack_public_path__ + \"static/media/clouds.07cd3d79.jpg\";","module.exports = __webpack_public_path__ + \"static/media/drizzle.9d710446.jpg\";","module.exports = __webpack_public_path__ + \"static/media/rain.74fdb822.jpg\";","module.exports = __webpack_public_path__ + \"static/media/snow.d25416fd.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/thunderstorm.edcb6a08.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/atmosphere.75c3ec7e.jpg\";","import React from \"react\";\nimport clearImgUrl from '../backgroundImages/clear.jpg';\nimport cloudsImgUrl from '../backgroundImages/clouds.jpg';\nimport drizzleImgUrl from '../backgroundImages/drizzle.jpg';\nimport rainImgUrl from '../backgroundImages/rain.jpg';\nimport snowImgUrl from '../backgroundImages/snow.jpeg';\nimport thunderstormImgUrl from '../backgroundImages/thunderstorm.jpeg';\nimport atmosphereImgUrl from '../backgroundImages/atmosphere.jpg';\n\n\n\n\n\nconst Weather = (props) => {\n    //set background images\n    const pageBackground = document.getElementById('main');\n    switch (props.icon) {\n        case 'wu-tstorms':\n            pageBackground.style.background = `url(${thunderstormImgUrl}) no-repeat center /100% 100%`;\n            break;\n        case 'wu-chancerain':\n            pageBackground.style.background = `url(${drizzleImgUrl}) no-repeat center /100% 100%`;\n            break;\n        case 'wu-rain':\n            pageBackground.style.background = `url(${rainImgUrl}) no-repeat center /100% 100%`;\n            break;\n        case 'wu-snow':\n            pageBackground.style.background = `url(${snowImgUrl}) no-repeat center /100% 100%`;\n            break;\n        case 'wu-fog':\n            pageBackground.style.background = `url(${atmosphereImgUrl}) no-repeat center /100% 100%`;\n            break;\n        case 'wu-sunny':\n            pageBackground.style.background = `url(${clearImgUrl}) no-repeat center /100% 100%`;\n            break;\n        case 'wu-cloudy':\n            pageBackground.style.background = `url(${cloudsImgUrl}) no-repeat center /100% 100%`;\n            break;\n        default:\n            \n    }\n\n    const buttonAnimation = () => {\n        const btn = document.getElementById('btn_search');\n        btn.innerHTML = 'Searching';\n        setTimeout(() => {\n            btn.innerHTML = 'Search';\n        }, 500);\n\n    }\n\n\n    return (      \n            <section className='card' >\n                <section className='card__top' >\n                    <div className='card__top__item'>\n                        <i className={`wu wu-white wu-128 ${props.icon}`}></i>\n                        <div className='card__top__item__description'><span className='underline'>{props.description}</span></div>\n                        <div className='card__top__item__location' >\n                            <span>{props.city}</span>\n                            <span>{props.country}</span>\n                        </div>\n\n                    </div>\n                    <div className='card__top__item'>\n                        {props.temp ? <div className='card__top__item__temp'>{props.temp}&deg;</div> : null}\n                        {(props.tempMax && props.tempMin) ? <div className='card__top__item__tempMaxMin'><span>{props.tempMax}&deg;</span><span> {props.tempMin}&deg;</span></div> : null}\n                        {props.humidity ? <div className='card__top__item__HWV'><span>Humidity:</span><span>{props.humidity}&emsp;%</span></div> : null}\n                        {props.visibility ? <div className='card__top__item__HWV'><span>Visibility:</span><span>{props.visibility}&emsp;km</span></div> : null}\n                        {props.windSpeed ? <div className='card__top__item__HWV'><span>Wind:</span><span>{props.windSpeed}&emsp;km/h</span></div> : null}\n                    </div>\n                    <div className='card__top__item'>\n                        <form onSubmit={props.loadWeather}>\n                            <div className='inputComponent'>\n                                <input type='text' className='input' name='city' autoComplete='off' required/>\n                                <label className='labelCity' htmlFor='city'>\n                                    <span className='contentCity'>City</span>\n                                </label>\n                            </div>\n                            <br />\n                            <div><button className='buttonSearch' id='btn_search' onClick={buttonAnimation}>Search</button></div>\n                        </form>\n                    </div>\n                </section>\n                <div className='card__bottom'>\n                    <div className='card__bottom__item'>\n                        <br />\n                        <div className='card__bottom__item__date'> {props.dateF[0]}</div>\n                        <div className='card__bottom__item__icon'><i className={`wu wu-white wu-64 ${props.iconF[0]}`}></i></div>\n                        {props.tempF[0] ? (<div className='card__bottom__item__temperture'> {props.tempF[0]}&deg;</div>) : null}\n                        <div className='card__bottom__item__description'> {props.descriptionF[0]}</div>\n                    </div>\n                    <div className='card__bottom__item'>\n                        <br />\n                        <div className='card__bottom__item__date'> {props.dateF[1]}</div>\n                        <div className='card__bottom__item__icon'><i className={`wu wu-white wu-64 ${props.iconF[1]}`}></i></div>\n                        {props.tempF[1] ? (<div className='card__bottom__item__temperture'> {props.tempF[1]}&deg;</div>) : null}\n                        <div className='card__bottom__item__description'> {props.descriptionF[1]}</div>\n                    </div>\n                    <div className='card__bottom__item'>\n                        <br />\n                        <div className='card__bottom__item__date'> {props.dateF[2]}</div>\n                        <div className='card__bottom__item__icon'><i className={`wu wu-white wu-64 ${props.iconF[2]}`}></i></div>\n                        {props.tempF[2] ? (<div className='card__bottom__item__temperture'> {props.tempF[2]}&deg;</div>) : null}\n                        <div className='card__bottom__item__description'> {props.descriptionF[2]}</div>\n                    </div>\n                    <div className='card__bottom__item'>\n                        <br />\n                        <div className='card__bottom__item__date'> {props.dateF[3]}</div>\n                        <div className='card__bottom__item__icon'><i className={`wu wu-white wu-64 ${props.iconF[3]}`}></i></div>\n                        {props.tempF[3] ? (<div className='card__bottom__item__temperture'> {props.tempF[3]}&deg;</div>) : null}\n                        <div className='card__bottom__item__description'> {props.descriptionF[3]}</div>\n                    </div>\n                    <div className='card__bottom__item'>\n                        <br />\n                        <div className='card__bottom__item__date'> {props.dateF[4]}</div>\n                        <div className='card__bottom__item__icon'><i className={`wu wu-white wu-64 ${props.iconF[4]}`}></i></div>\n                        {props.tempF[4] ? (<div className='card__bottom__item__temperture'> {props.tempF[4]}&deg;</div>) : null}\n                        <div className='card__bottom__item__description'> {props.descriptionF[4]}</div>\n                    </div>\n\n                </div>\n            </section>    \n    );\n\n}\n\n\n\nexport default Weather;","import React from \"react\";\nimport Weather from './Weather.js';\nimport './WeatherApp.scss';\n\n\nconst API_key = process.env.REACT_APP_WEATHER_API_KEY;\n\nclass WeatherApp extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            isLoading: true,\n            temp: undefined,\n            tempMax: undefined,\n            tempMin: undefined,\n            city: undefined,\n            country: undefined,\n            icon: undefined,\n            main: undefined,\n            celsius: undefined,\n            description: \"\",\n            humidity:undefined,\n            windSpeed:undefined,\n            visibility:undefined,\n            \n            tempF: [],\n            iconF: [],\n            dateF: [],\n            descriptionF: [],\n        };\n\n        // store icons' ccs name\n        this.weatherIcons = {\n            Thunderstorm: \"wu-tstorms\",\n            Drizzle: \"wu-chancerain\",\n            Rain: \"wu-rain\",\n            Snow: \"wu-snow\",\n            Atmosphere: \"wu-fog\",\n            Clear: \"wu-sunny\",\n            Clouds: \"wu-cloudy\"\n        };\n    }\n\n    //change icon'id into icons' ccs name\n    get_WeatherIcon(weatherIcons, rangeId) {\n        let weatherIcon;\n        switch (true) {\n            case rangeId >= 200 && rangeId < 232:\n                weatherIcon = weatherIcons.Thunderstorm;\n\n                break;\n            case rangeId >= 300 && rangeId <= 321:\n                weatherIcon = weatherIcons.Drizzle;\n\n                break;\n            case rangeId >= 500 && rangeId <= 521:\n                weatherIcon = weatherIcons.Rain;\n\n                break;\n            case rangeId >= 600 && rangeId <= 622:\n                weatherIcon = weatherIcons.Snow;\n\n                break;\n            case rangeId >= 701 && rangeId <= 781:\n                weatherIcon = weatherIcons.Atmosphere;\n\n                break;\n            case rangeId === 800:\n                weatherIcon = weatherIcons.Clear;\n\n                break;\n            case rangeId >= 801 && rangeId <= 804:\n                weatherIcon = weatherIcons.Clouds;\n                break;\n            default:\n\n        }\n        return weatherIcon;\n    }\n\n    //change original data into date\n    get_Date(str) {\n        let dateStr, monthStr, dayStr;\n        switch (str.substr(0, 2)) {\n            case '01':\n                monthStr = 'Jan';\n                break;\n            case '02':\n                monthStr = 'Feb';\n                break;\n            case '03':\n                monthStr = 'Mar';\n                break;\n            case '04':\n                monthStr = 'Apr';\n                break;\n            case '05':\n                monthStr = 'May';\n                break;\n            case '06':\n                monthStr = 'Jun';\n                break;\n            case '07':\n                monthStr = 'Jul';\n                break;\n            case '08':\n                monthStr = 'Aug';\n                break;\n            case '09':\n                monthStr = 'Sep';\n                break;\n            case '10':\n                monthStr = 'Oct';\n                break;\n            case '11':\n                monthStr = 'Nov';\n                break;\n            case '12':\n                monthStr = 'Dec';\n                break;\n            default:\n        }\n\n        if (str[3] === '1') {\n            dayStr = str.substr(3);\n        } else {\n            dayStr = str.substr(4);\n        }\n\n        dateStr = `${monthStr}  ${dayStr}`;\n\n        return dateStr;\n    }\n\n    async componentDidMount() {\n        //get sydney weather as default\n        this.fetchWeather('Sydney');\n    }\n\n     loadWeather = async e => {\n        e.preventDefault();\n        const newcity = e.target.elements.city.value;\n        this.fetchWeather(newcity);\n    }\n    fetchWeather=async(city)=>{\n\n        const api = `http://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_key}`;\n        const apiF = `http://api.openweathermap.org/data/2.5/forecast?q=${city}&appid=${API_key}`;\n        //get current weather\n        const response = await (await fetch(api)).json();\n            if (response.cod === '404') {\n                alert(\"Please input correct city name!\");\n            } else {\n                this.setState({\n                    isLoading: false,\n                    city: response.name,\n                    country: response.sys.country,\n                    temp: this.calculateCelsius(response.main.temp),\n                    tempMax: this.calculateCelsius(response.main.temp_max),\n                    tempMin: this.calculateCelsius(response.main.temp_min),\n                    description: this.optimizedDescription(response.weather[0].description),\n                    icon: this.get_WeatherIcon(this.weatherIcons, response.weather[0].id),\n                    humidity:response.main.humidity,\n                    visibility:Math.round(response.visibility/1000),\n                    windSpeed:Math.round(response.wind.speed*3.6),\n                });\n                //function: forecast coming five days\n                const responseF = await (await fetch(apiF)).json();\n                const obj = {};\n                const tempFArray = [], iconFArray = [], dateFArray = [], descriptionFArray = [];\n                obj[0] = responseF.list[7];\n                obj[1] = responseF.list[15];\n                obj[2] = responseF.list[23];\n                obj[3] = responseF.list[31];\n                obj[4] = responseF.list[39];\n                for (let i = 0; i <= 4; i++) {\n                    tempFArray.push(this.calculateCelsius(obj[i].main.temp));\n                    descriptionFArray.push(this.optimizedDescription(obj[i].weather[0].description));\n                    iconFArray.push(this.get_WeatherIcon(this.weatherIcons, obj[i].weather[0].id));\n                    dateFArray.push(this.get_Date(obj[i].dt_txt.slice(5, 10)));\n                }\n                this.setState({\n                    tempF: tempFArray,\n                    descriptionF: descriptionFArray,\n                    iconF: iconFArray,\n                    dateF: dateFArray,\n                });\n            }\n    }\n\n    calculateCelsius(temp) {\n        return Math.floor(temp - 273.15);\n    }\n\n    optimizedDescription(description){\n        description=description[0].toUpperCase()+description.slice(1);\n\n        for(let i=0;i<=description.length;i++){\n            if(description[i]===\" \"){\n                description=description.slice(0,i+1)+description[i+1].toUpperCase()+description.slice(i+2);\n            }\n        }\n            return (description);\n\n    }\n\n\n\n    render() {\n\n        return (\n            <section className='main' id='main'>\n            <Weather\n                loadWeather={this.loadWeather}\n                city={this.state.city}\n                country={this.state.country}\n                icon={this.state.icon}\n                temp={this.state.temp}\n                tempMax={this.state.tempMax}\n                tempMin={this.state.tempMin}\n                description={this.state.description}\n                tempF={this.state.tempF}\n                descriptionF={this.state.descriptionF}\n                iconF={this.state.iconF}\n                dateF={this.state.dateF} \n                humidity={this.state.humidity}\n                visibility={this.state.visibility}\n                windSpeed={this.state.windSpeed}               \n            />\n            </section>\n\n\n\n        );\n    }\n}\n\nexport default WeatherApp;","import React from 'react';\nimport './App.css';\nimport WeatherApp from './component/WeatherApp.js'\nimport 'weather-underground-icons/dist/wu-icons-style.css'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <WeatherApp />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}